#pragma version 10
#pragma typetrack false

// smart_contracts.weather_marketplace.contract.WeatherMarketplace.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75 "total_tokens_sold" "weather_asa_id" "token_price" "token_duration" "is_active"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/weather_marketplace/contract.py:15-16
    // # Token price in microAlgos (10 ALGO = 10,000,000 microAlgos)
    // self.token_price = UInt64(10_000_000)
    bytec_3 // "token_price"
    pushint 10000000 // 10000000
    app_global_put
    // smart_contracts/weather_marketplace/contract.py:18-19
    // # Weather access token ASA ID (set after ASA creation outside contract)
    // self.weather_asa_id = UInt64(0)
    bytec_2 // "weather_asa_id"
    intc_1 // 0
    app_global_put
    // smart_contracts/weather_marketplace/contract.py:21-22
    // # Token validity duration in seconds (1 hour = 3600 seconds)
    // self.token_duration = UInt64(3600)
    bytec 4 // "token_duration"
    pushint 3600 // 3600
    app_global_put
    // smart_contracts/weather_marketplace/contract.py:24-25
    // # Total tokens sold counter
    // self.total_tokens_sold = UInt64(0)
    bytec_1 // "total_tokens_sold"
    intc_1 // 0
    app_global_put
    // smart_contracts/weather_marketplace/contract.py:27-28
    // # Contract is active flag
    // self.is_active = Bool(True)
    bytec 5 // "is_active"
    pushbytes 0x80
    app_global_put

main_after_if_else@2:
    // smart_contracts/weather_marketplace/contract.py:6
    // class WeatherMarketplace(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@13
    pushbytess 0x79bba1bb 0x6f8977e8 0xdbced911 0x9ada3543 0x5e80db51 0x564c8862 0xde20dcaa 0x2eeebbb9 // method "get_token_price()uint64", method "get_weather_asa_id()uint64", method "set_weather_asa_id(uint64)void", method "get_token_duration()uint64", method "record_token_sale()uint64", method "get_total_sales()uint64", method "is_contract_active()bool", method "get_contract_info()string"
    txna ApplicationArgs 0
    match main_get_token_price_route@5 main_get_weather_asa_id_route@6 main_set_weather_asa_id_route@7 main_get_token_duration_route@8 main_record_token_sale_route@9 main_get_total_sales_route@10 main_is_contract_active_route@11 main_get_contract_info_route@12

main_after_if_else@15:
    // smart_contracts/weather_marketplace/contract.py:6
    // class WeatherMarketplace(ARC4Contract):
    intc_1 // 0
    return

main_get_contract_info_route@12:
    // smart_contracts/weather_marketplace/contract.py:101
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c750036576561746865724d61726b6574706c6163652076312e30202d20546f6b656e697a656420576561746865722041504920416363657373
    log
    intc_0 // 1
    return

main_is_contract_active_route@11:
    // smart_contracts/weather_marketplace/contract.py:91
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub is_contract_active
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_get_total_sales_route@10:
    // smart_contracts/weather_marketplace/contract.py:81
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_total_sales
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_record_token_sale_route@9:
    // smart_contracts/weather_marketplace/contract.py:70
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub record_token_sale
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_get_token_duration_route@8:
    // smart_contracts/weather_marketplace/contract.py:60
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_token_duration
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_set_weather_asa_id_route@7:
    // smart_contracts/weather_marketplace/contract.py:50
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/weather_marketplace/contract.py:6
    // class WeatherMarketplace(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/weather_marketplace/contract.py:50
    // @abimethod()
    callsub set_weather_asa_id
    intc_0 // 1
    return

main_get_weather_asa_id_route@6:
    // smart_contracts/weather_marketplace/contract.py:40
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_weather_asa_id
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_get_token_price_route@5:
    // smart_contracts/weather_marketplace/contract.py:30
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_token_price
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@13:
    // smart_contracts/weather_marketplace/contract.py:6
    // class WeatherMarketplace(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts.weather_marketplace.contract.WeatherMarketplace.get_token_price() -> bytes:
get_token_price:
    // smart_contracts/weather_marketplace/contract.py:38
    // return ARC4UInt64(self.token_price)
    intc_1 // 0
    bytec_3 // "token_price"
    app_global_get_ex
    assert // check self.token_price exists
    itob
    retsub


// smart_contracts.weather_marketplace.contract.WeatherMarketplace.get_weather_asa_id() -> bytes:
get_weather_asa_id:
    // smart_contracts/weather_marketplace/contract.py:48
    // return ARC4UInt64(self.weather_asa_id)
    intc_1 // 0
    bytec_2 // "weather_asa_id"
    app_global_get_ex
    assert // check self.weather_asa_id exists
    itob
    retsub


// smart_contracts.weather_marketplace.contract.WeatherMarketplace.set_weather_asa_id(asa_id: bytes) -> void:
set_weather_asa_id:
    // smart_contracts/weather_marketplace/contract.py:50-51
    // @abimethod()
    // def set_weather_asa_id(self, asa_id: ARC4UInt64) -> None:
    proto 1 0
    // smart_contracts/weather_marketplace/contract.py:58
    // self.weather_asa_id = asa_id.native
    frame_dig -1
    btoi
    bytec_2 // "weather_asa_id"
    swap
    app_global_put
    retsub


// smart_contracts.weather_marketplace.contract.WeatherMarketplace.get_token_duration() -> bytes:
get_token_duration:
    // smart_contracts/weather_marketplace/contract.py:68
    // return ARC4UInt64(self.token_duration)
    intc_1 // 0
    bytec 4 // "token_duration"
    app_global_get_ex
    assert // check self.token_duration exists
    itob
    retsub


// smart_contracts.weather_marketplace.contract.WeatherMarketplace.record_token_sale() -> bytes:
record_token_sale:
    // smart_contracts/weather_marketplace/contract.py:78
    // self.total_tokens_sold += 1
    intc_1 // 0
    bytec_1 // "total_tokens_sold"
    app_global_get_ex
    assert // check self.total_tokens_sold exists
    intc_0 // 1
    +
    bytec_1 // "total_tokens_sold"
    dig 1
    app_global_put
    // smart_contracts/weather_marketplace/contract.py:79
    // return ARC4UInt64(self.total_tokens_sold)
    itob
    retsub


// smart_contracts.weather_marketplace.contract.WeatherMarketplace.get_total_sales() -> bytes:
get_total_sales:
    // smart_contracts/weather_marketplace/contract.py:89
    // return ARC4UInt64(self.total_tokens_sold)
    intc_1 // 0
    bytec_1 // "total_tokens_sold"
    app_global_get_ex
    assert // check self.total_tokens_sold exists
    itob
    retsub


// smart_contracts.weather_marketplace.contract.WeatherMarketplace.is_contract_active() -> bytes:
is_contract_active:
    // smart_contracts/weather_marketplace/contract.py:99
    // return self.is_active
    intc_1 // 0
    bytec 5 // "is_active"
    app_global_get_ex
    assert // check self.is_active exists
    retsub

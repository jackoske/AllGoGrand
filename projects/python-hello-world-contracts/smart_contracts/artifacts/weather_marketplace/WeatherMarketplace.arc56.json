{
    "name": "WeatherMarketplace",
    "structs": {},
    "methods": [
        {
            "name": "get_token_price",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Token price in microAlgos"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get the current token price.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_weather_asa_id",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The weather token ASA ID"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get the weather ASA ID.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_weather_asa_id",
            "args": [
                {
                    "type": "uint64",
                    "name": "asa_id",
                    "desc": "The ASA ID to set"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Set the weather ASA ID (admin only for demo).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_token_duration",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Duration in seconds"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get the token validity duration.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "record_token_sale",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Updated total sales count"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Record a token sale (simplified for demo).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_sales",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Total number of tokens sold"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get total token sales count.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_contract_active",
            "args": [],
            "returns": {
                "type": "bool",
                "desc": "True if contract is active"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Check if the contract is active.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_contract_info",
            "args": [],
            "returns": {
                "type": "string",
                "desc": "JSON string with contract info"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get basic contract information as JSON string.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Simplified smart contract for tokenized weather API access demo.\n    \n    This contract manages basic state for weather access tokens.\n    For the MVP demo, we'll use a simplified approach.\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "token_price": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG9rZW5fcHJpY2U="
                },
                "weather_asa_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "d2VhdGhlcl9hc2FfaWQ="
                },
                "token_duration": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG9rZW5fZHVyYXRpb24="
                },
                "total_tokens_sold": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfdG9rZW5zX3NvbGQ="
                },
                "is_active": {
                    "keyType": "AVMString",
                    "valueType": "bool",
                    "key": "aXNfYWN0aXZl"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        185,
                        257,
                        273,
                        289,
                        305,
                        321,
                        336,
                        352
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        373
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        188,
                        260,
                        276,
                        292,
                        308,
                        324,
                        339,
                        355
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        427
                    ],
                    "errorMessage": "check self.is_active exists"
                },
                {
                    "pc": [
                        402
                    ],
                    "errorMessage": "check self.token_duration exists"
                },
                {
                    "pc": [
                        379
                    ],
                    "errorMessage": "check self.token_price exists"
                },
                {
                    "pc": [
                        408,
                        420
                    ],
                    "errorMessage": "check self.total_tokens_sold exists"
                },
                {
                    "pc": [
                        385
                    ],
                    "errorMessage": "check self.weather_asa_id exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAQAmBgQVH3x1EXRvdGFsX3Rva2Vuc19zb2xkDndlYXRoZXJfYXNhX2lkC3Rva2VuX3ByaWNlDnRva2VuX2R1cmF0aW9uCWlzX2FjdGl2ZTEYQAAZK4GAreIEZyojZycEgZAcZykjZycFgAGAZzEbQQD4gggEebuhuwRviXfoBNvO2REEmto1QwRegNtRBFZMiGIE3iDcqgQu7ru5NhoAjggAqQCZAIoAegBqAFoASgACI0MxGRREMRhEgDwVH3x1ADZXZWF0aGVyTWFya2V0cGxhY2UgdjEuMCAtIFRva2VuaXplZCBXZWF0aGVyIEFQSSBBY2Nlc3OwIkMxGRREMRhEiACfKExQsCJDMRkURDEYRIgAiShMULAiQzEZFEQxGESIAG0oTFCwIkMxGRREMRhEiABWKExQsCJDMRkURDEYRDYaAYgAOSJDMRkURDEYRIgAJyhMULAiQzEZFEQxGESIABEoTFCwIkMxGUD/QjEYFEQiQyMrZUQWiSMqZUQWiYoBAIv/FypMZ4kjJwRlRBaJIyllRCIIKUsBZxaJIyllRBaJIycFZUSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}